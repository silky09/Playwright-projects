Locators: is a class in Playwright library

1. page.getByAltText() - to locate an element, usually image, by its text alternative.
2. page.getByPlaceholder() - to locate an input by placeholder.
3. page.getByRole() to locate by explicit and implicit accessibility attributes.
4. page.getByText() to locate by text content.

5. page.getByLabel() to locate a form control by associated label's text.
6. page.getByTitle() to locate an element by its title attribute.
7. page.getByTestId() to locate an element based on its data-testid attribute (other attributes can be configured).


----------------------------------------------------------------------------

Red (!)
Blue (?)
Green (*)
Yellow (^)
Pink (&)
Purple (~)
Mustard (todo)
Grey (//)
..................................................................
To find an object or element we use the syntax:::  
---->  page.locator(selector[, options])

Selectors e.g. ID, CSS, XPath, Class, Name, , Text, â€¦

Locator is a class in Playwright library

------------

1. //ID: id=user-name 
await page.locator('id=user-name').fill('')

2. //Xpath: //input[@name='password']
    await page.locator('input[@name="password"]').fill('secret_sauce')

other way:
    await page.locator('xpath=input[@name="password"]').fill('secret_sauce')

3. //CSS selector:  #login-button
await page.locator('#login-button').click()


4. //using Text: text visible in the page.
await page.locator('text=Login').click()
//for complicated text, 
await page.locator('input:has-text("Login")').click()




----------------------------------------

Soft and Hard assertions: 
await expect.soft(AddMenu).toBeEnabled()


------------------------------

// await LastName.focus(); // Focus the input field


-----------------------------------


    await expect(logo).toHaveText('Swag Labs')  //Verify complete text of the element
    await expect(logo).toBeVisible()  //Verify header text/element (logo) is visible or not 
    await expect(logo).toContainText('Swag') // verify partial text


    ----------------------------------


    //if input box is enabled then fill the value.
    //then again verify the input field having the same value or not.

    const userName = await page.locator('id=user-name')

   if ([await expect(userName).toBeEnabled()]) {
     userName.fill('problem_user')
     await expect(userName).toHaveValue('problem_user') //verify the input field having the same value or not.

     -----------------------------------------------------------------

     // Page Object Model: it is also known as POM. it is a design pattern in test automation 
     that creates an object repository for storing all elements.
     It is useful in reducing code duplication and improves test case maintenance.

     in POM, consider each web page as a class file.
     within the pages, we write all the classes


     ** we can not use page directly so we need to use constructor

// Basic page template:

1. import {  } from "module";

2. type class and enter: it will create a block

    class HomePage {
        page:any
        constructor(page){
        //then we need to initialize this page
        this.page = page

    }
    }

3.   export default HomePage

   ///** 
     --after defining Locators, we need to create  methods which will perform the action

     ---------------------------------------------------------------------------



//sortcuts:

1. ctrl+B: hide and unhide the sidebar
2. ctrl+J: open terminal


// **to find the folder
../../pages/

//generate new block statement
** type 'new', it will generate new statement

----------------------------------------------------

** if u hover over the text and press "ctrl" the text becomes link.

-------------------------------------------------------------


  //await FirstName.fill('Silk') //pressSequentially()
    //In most cases, you should use locator.fill(value[, options]) instead. You only need to press keys one by one if there is special keyboard handling on the page -
    //in this case use locator.pressSequentially(text, {delay:200}]).


    -----------------------------


    Page:    
    async enterFirstName(firstName:string) {
        await this.page.locator("input#first-name").fill("Silk");
    }

    async enterLastName(lastName:string) {
        await this.page.locator("input#last-name").fill("San");;
    }

    async enterPostalCode(postalCode:string) {
        await this.page.locator("id=postal-code").fill("123456");;
    }


    -----------------------------------------------

    storing data as variable

    /* const myUserName = "standard_user"
const myPassword = "secret_sauce"
const myFirstName = "Silky"
const myLastName = "San"
const myPostalCode = "1234567"
const Products = "Products"
const Continue_Shopping = "Continue Shopping"
const Checkout = "Checkout"
const Remove = "Remove"
const standard_user = "standard_user"
const Swag_Labs = "Swag Labs"
const Swag = "Swag"  */


----------------------------------------

Github action:

name: "e2e"
on: [push]
jobs:
    tests_e2e:
      name: Run end-to-end tests
      runs-on: windows-latest # or macos-latest, ubuntu-latest
      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-node@v3
        - name: Install dependencies
          run: npm ci
        - name: Install playwright browsers
          run: npx playwright install --with-deps
        - name: Run tests
          run: npx playwright test pom-test/CompleteTest.test.ts 
----------------------------------------------------


// generate allure report: 

npx allure generate allure-results --clean && npx allure open

or: allure serve

-----------------------------
//git config --global user.email "you@example.com"
//git config --global user.name "Your Name"

--------------------------------------------

npm init playwright@latest
npx playwright codegen  (generate the code)

--------------------------

multi line comments:

alt + shift + A
----------------------

to access camera and microphone:

You just need to update "playwright.config.ts" file where you set up browser under different project.

{
   name: 'chromium',
   use:{
      permissions: ["camera"]
   }
}
You can also provide the permission of microphone together like below

 {
      name: 'chromium',
      use:{
        permissions: ["microphone","camera"]
      }
}

------------------------------------

//clicking on elements within an SVG using XPath Playwright

locator("//i[@class='n-base-icon']/*[name()='svg']")


-----------------------------------------------------


1. npx playwright test --ui  (Opening UI Mode)
2. npx playwright test --worker=1 (run the test in a single web browser)
3. npx playwright test --debug (debugging the test) 
npx playwright test machine:21 --debug (debug starting from specific line where test starts)

4. npx playwright test --headless (run test in a headless mode; no GUI comes up in the screen)

//using tags: @sanity, @smoke, ----> test("Test Signin page @smoke")
5. npx playwright test --grep "@smoke"   or -g "@smoke"


Hooks: beforeAll, beforeEach, afterAll, afterEach

Groups: describe

Annotations: only, skip, skip with condition, fail, fixme, slow (it is used to control execution of the test.)

Tags: @smoke, @reg, @sanity, @fast, @slow (run the test that have the certain tags)
- put tags within the title of the test inside " "-
- use grep keyword, --grep "@smoke"   or -g "@smoke"

--------------------------
Checkbox:
// Asserts that checkbox is un-checked.
1. await expect(await typePage.CheckBox_2.isChecked()).toBeFalsy();
//Asserts that checkbox is checked.
 await expect(typePage.CheckBox_2.isChecked()).toBeTruthy();

--------------------
screenshot: 

Here is a quick way to capture a screenshot and save it into a file:

await page.screenshot({ path: 'screenshot.png' });

await page.screenshot({ path: './screenshots/refreshMachineAsset_data.png'});